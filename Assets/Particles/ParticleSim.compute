#pragma kernel Verlet
#pragma kernel DensityPressure
#pragma kernel Force
#pragma kernel HandInput
#pragma kernel PickNewParticles
#pragma kernel CopyAppendToRW
#pragma kernel SumBins
#pragma kernel ClearBinCounts

struct GPUParticle {
     float3 position;
     float  density;
     float3 velocity;
     float  pressure;
     float3 force;
     //float  temperature;
     uint   type; // 0 = water, 1 = fire, 2 = wood, 3 = earth, 4 = metal, 5 = seed
     float  temperature;
     float  remainingLifetime;
     float  pad0;
     float  pad1;
};

//struct NeighborsInfo {
//    int startIndex;
//    int count;
//};

  //StructuredBuffer<GPUParticle> lastParticles;
//RWStructuredBuffer<GPUParticle> nextParticles;
RWStructuredBuffer<int> binCounts;
RWStructuredBuffer<int> binParticleIndices;
//RWStructuredBuffer<int> ;
  StructuredBuffer<GPUParticle> lastParticles;
RWStructuredBuffer<GPUParticle> particles;
AppendStructuredBuffer<GPUParticle> nextParticles;

int particleCount;

float pi = 3.14159274;

// particle physical properties (move to per-particle buffer?)
float particleMass           = 0.02;
float wallDamping; 
float particleStiffness      = 2000.0; 
float particleRestingDensity = 1000.0;
float particleViscosity      = 1000.0;

float boundsSize;
//float cellSize;

float smoothingLength = 0.020;
float interactionLength;
float timeStep = 0.01666;
float3 gravity = float3(0, -9.82, 0);

float3 leftHandPosition;
int    leftHandMode; 
float  leftHandStrength;
float3 rightHandPosition;
int    rightHandMode;
float  rightHandStrength;

float rand (float n) {
    return frac(sin(n) * 43758.5453123);
}

//https://fgiesen.wordpress.com/2009/12/13/decoding-morton-codes/
// "Insert" two 0 bits after each of the 10 low bits of x
uint Part1By2(uint x)
{
  x &= 0x000003ff;                  // x = ---- ---- ---- ---- ---- --98 7654 3210
  x = (x ^ (x << 16)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
  x = (x ^ (x <<  8)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
  x = (x ^ (x <<  4)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
  x = (x ^ (x <<  2)) & 0x09249249; // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
  return x;
}

// Inverse of Part1By2 - "delete" all bits not at positions divisible by 3
uint Compact1By2(uint x)
{
  x &= 0x09249249;                  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
  x = (x ^ (x >>  2)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
  x = (x ^ (x >>  4)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
  x = (x ^ (x >>  8)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
  x = (x ^ (x >> 16)) & 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210
  return x;
}


uint EncodeMorton3(uint x, uint y, uint z)
{
  return (Part1By2(z) << 2) + (Part1By2(y) << 1) + Part1By2(x);
}


/*
uint EncodeMorton3(uint x, uint y, uint z) {
    float cellSize = smoothingLength;
    float lengthPerAxis = boundsSize * 2.0;
    uint binsPerAxis = ceil(lengthPerAxis / smoothingLength);
    
    return x * binsPerAxis * binsPerAxis + y * binsPerAxis + z;
}
*/

uint DecodeMorton3X(uint code)
{
  return Compact1By2(code >> 0);
}

uint DecodeMorton3Y(uint code)
{
  return Compact1By2(code >> 1);
}

uint DecodeMorton3Z(uint code)
{
  return Compact1By2(code >> 2);
}

[numthreads(64,1,1)]
void Verlet (uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;

    GPUParticle thisParticle = particles[id]; 
    float3 acceleration = thisParticle.force / thisParticle.density;
    float3 velocity = thisParticle.velocity + timeStep * acceleration;// + timeStep * gravity;
    
    if (thisParticle.type == 4) {
        velocity = float3(0,0,0);
    } else if (thisParticle.type == 2) { 
        velocity *= 0.10;
    } else if (thisParticle.type == 3) {
        velocity *= 0.25;
    }
    
    float3 position = thisParticle.position + timeStep * velocity; 
    //velocity *= 0.985;

    // TODO: apply sphere constraint
    if (length(position) > boundsSize) {
        position = normalize(position) * boundsSize;
        //velocity -= normalize(position) * particleRadius;
        velocity *= wallDamping;
    }
    
    particles[id].velocity = velocity;
    particles[id].position = position;
}

[numthreads(64,1,1)]
void DensityPressure(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;
        
    float cellSize = smoothingLength;
    float lengthPerAxis = boundsSize * 2.0;
    uint binsPerAxis = ceil(lengthPerAxis / smoothingLength);
        
    float3 positiveShiftedPosition = particles[id].position + float3(boundsSize, boundsSize, boundsSize);
    int3 binCoords = int3(floor(positiveShiftedPosition.x / cellSize), floor(positiveShiftedPosition.y / cellSize), floor(positiveShiftedPosition.z / cellSize));
    uint binIndex = EncodeMorton3(binCoords.x, binCoords.y, binCoords.z);

    GPUParticle thisParticle = particles[id];
    float densitySum = 0.001;
    //float densitySum = 0.0;
    
    // TODO: optimize!!! needs spatial partitioning
    //for (uint j = 0; j < neighborInfo[id].count; j++) {
    //    uint i = neighborLists[neighborInfo[id].startIndex + j];
    
    //for (uint i = 0; i < particleCount; i++) {
    
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                int3 currentBinCoords = int3(binCoords.x + x, binCoords.y + y, binCoords.z + z);
                if (currentBinCoords.x >= binsPerAxis || currentBinCoords.x < 0 ||
                    currentBinCoords.y >= binsPerAxis || currentBinCoords.y < 0 ||
                    currentBinCoords.z >= binsPerAxis || currentBinCoords.z < 0) {
                    continue;
                }
                uint currentBinIndex = EncodeMorton3(currentBinCoords.x, currentBinCoords.y, currentBinCoords.z);
                uint particlesInCurrentBin = binCounts[currentBinIndex];
                for (uint i = 0; i < particlesInCurrentBin; i++) {
                    uint otherParticleIndex = binParticleIndices[currentBinIndex * 1024 + i];
                    GPUParticle otherParticle = particles[otherParticleIndex];
                    
                    float3 delta = thisParticle.position - otherParticle.position;
                    float distance = length(delta);
                    if (distance < smoothingLength) {
                        densitySum += particleMass * 315.0 * pow(smoothingLength * smoothingLength - distance * distance, 3.0) / (64.0 * pi * pow(smoothingLength, 9.0));
                    }
                    
                    if (distance < interactionLength) {
                        // you'd think this would be a divergence madhouse but it's still much faster than CPU implementation
                        if (thisParticle.type == 1/* && distance < interactionLength*/) {
                            if (otherParticle.type == 2) {
                                //particles[i].temperature += 0.5;
                                //if (particles[i].temperature > 1) {
                                    otherParticle.type = 1;
                                    otherParticle.remainingLifetime = 1.0;
                                //} 
                                particles[otherParticleIndex] = otherParticle;
                            }
                            
                            if (otherParticle.type == 0) {
                                //thisParticle.type = 0;
                                thisParticle.remainingLifetime -= 0.5;
                                otherParticle.velocity *= 1.5;
                                particles[otherParticleIndex] = otherParticle;
                            } 
                        }
                        
                        if (thisParticle.type == 2/* && distance < interactionLength*/) {
                            if (otherParticle.type == 0) {
                                //particles[i].type = 2;
                                //otherParticle.remainingLifetime = -5.0;
                                otherParticle.type = 2;
                                thisParticle.remainingLifetime += 0.25;
                                particles[otherParticleIndex] = otherParticle;
                            }
                        }
                        
                        if (thisParticle.type == 5/* && distance < interactionLength*/) {
                            if (otherParticle.type == 3) {
                                thisParticle.type = 2;
                                thisParticle.remainingLifetime += 3.0;
                            }
                        }
                    }
                }
            }
        }
    }
    
    thisParticle.density = densitySum;
    thisParticle.pressure = max(particleStiffness * (densitySum - particleRestingDensity), 0.0);
    particles[id] = thisParticle;
}

// TODO: could this be rolled into DensityPressure kernel? avoid calculating delta twice etc
[numthreads(64,1,1)]
void Force(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;
        
    float cellSize = smoothingLength;
    float lengthPerAxis = boundsSize * 2.0;
    uint binsPerAxis = ceil(lengthPerAxis / smoothingLength);
        
    float3 positiveShiftedPosition = particles[id].position + float3(boundsSize, boundsSize, boundsSize);
    int3 binCoords = int3(floor(positiveShiftedPosition.x / cellSize), floor(positiveShiftedPosition.y / cellSize), floor(positiveShiftedPosition.z / cellSize));
    uint binIndex = EncodeMorton3(binCoords.x, binCoords.y, binCoords.z);
    
    //binParticleIndices[binIndex * 256 + binCounts[binIndex]] = id;

    GPUParticle thisParticle = particles[id];
    float3 pressureForce = float3(0,0,0);
    float3 viscosityForce = float3(0,0,0);

    //for (uint j = 0; j < neighborInfo[id].count; j++) {
    //    uint i = neighborLists[neighborInfo[id].startIndex + j];
    //for (uint i = 0; i < particleCount; i++) {
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                int3 currentBinCoords = int3(binCoords.x + x, binCoords.y + y, binCoords.z + z);
                if (currentBinCoords.x >= binsPerAxis || currentBinCoords.x < 0 ||
                    currentBinCoords.y >= binsPerAxis || currentBinCoords.y < 0 ||
                    currentBinCoords.z >= binsPerAxis || currentBinCoords.z < 0) {
                    continue;
                }
                uint currentBinIndex = EncodeMorton3(currentBinCoords.x, currentBinCoords.y, currentBinCoords.z);
                uint particlesInCurrentBin = binCounts[currentBinIndex];
                for (uint i = 0; i < particlesInCurrentBin; i++) {
                    uint otherParticleIndex = binParticleIndices[currentBinIndex * 1024 + i];
                    GPUParticle otherParticle = particles[otherParticleIndex];
                    if (id == otherParticleIndex) continue;
                    float3 delta = thisParticle.position - otherParticle.position;
                    float distance = length(delta);
                    if (distance < smoothingLength) {
                        pressureForce -= particleMass * (thisParticle.pressure + otherParticle.pressure) / (2.0 * otherParticle.density) *
                            -45.0 / (pi * pow(smoothingLength, 6.0)) * pow(smoothingLength - distance, 2.0) * normalize(delta);
                            
                        viscosityForce += particleMass * (otherParticle.velocity - thisParticle.velocity) * otherParticle.density *
                             45.0 / (pi * pow(smoothingLength, 6.0)) * (smoothingLength - distance);
                    }
                }
            }
        }
    }
    
    viscosityForce *= particleViscosity;
    if (length(viscosityForce) > 50.0)
        viscosityForce = normalize(viscosityForce) * 50.0;
        
    if (thisParticle.type == 1) {
        gravity = -gravity;
    }
        
    float3 externalForce = gravity * thisParticle.density;
    
    particles[id].force = pressureForce + viscosityForce + externalForce;
}

[numthreads(64,1,1)]
void HandInput(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;

    GPUParticle thisParticle = particles[id];

    // mode enum: 0 = none, 1 = fist, 2 = pinch, 3 = point (water), 4 = point (fire), 5 = point (wood), 6 = point (earth), 7 = point (metal)
    // type enum: 0 = water, 1 = fire, 2 = wood, 3 = earth, 4 = metal, 5 = seed
    float3 leftHandDelta = thisParticle.position - leftHandPosition;
    float leftHandDist = length(leftHandDelta);
    if (leftHandMode == 1) {
        thisParticle.force -= (leftHandDelta * 5.0) / pow(leftHandDist, 2.0); // * thisParticle.density?
    } else if (leftHandMode == 2 && leftHandDist < 0.15) {
        thisParticle.remainingLifetime = -1.0;
    } else if (leftHandMode >= 3 && leftHandMode <= 7 && leftHandDist < 0.15) {
        if (leftHandMode == 3) {
            thisParticle.type = 0;
        } else if (leftHandMode == 4) {
            thisParticle.type = 1;
        } else if (leftHandMode == 5) {
            thisParticle.type = 2;
        } else if (leftHandMode == 6) {
            thisParticle.type = 3;
        } else if (leftHandMode == 7) {
            thisParticle.type = 4;
        }
    }
    
    float3 rightHandDelta = thisParticle.position - rightHandPosition;
    float rightHandDist = length(rightHandDelta);
    if (rightHandMode == 1) {
        thisParticle.force -= (rightHandDelta * 5.0) / pow(rightHandDist, 2.0); // * thisParticle.density?
    } else if (rightHandMode == 2 && rightHandDist < 0.15) {
        thisParticle.remainingLifetime = -1.0;
    } else if (rightHandMode >= 3 && rightHandMode <= 7 && rightHandDist < 0.15) {
        if (rightHandMode == 3) {
            thisParticle.type = 0;
        } else if (rightHandMode == 4) {
            thisParticle.type = 1;
        } else if (rightHandMode == 5) {
            thisParticle.type = 2;
        } else if (rightHandMode == 6) {
            thisParticle.type = 3;
        } else if (rightHandMode == 7) {
            thisParticle.type = 4;
        }
    }
    
    particles[id] = thisParticle;
}

[numthreads(64,1,1)]
void PickNewParticles(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;
        
    GPUParticle thisParticle = particles[id];
    
    if (thisParticle.type == 1 || thisParticle.type == 5) {
        thisParticle.remainingLifetime -= timeStep / 2.0;
    } else if (thisParticle.type == 2) {
        thisParticle.remainingLifetime -= timeStep / 7.5;
        if (thisParticle.remainingLifetime > 3.0) {
            GPUParticle newWoodParticle = particles[id];
            newWoodParticle.remainingLifetime = thisParticle.remainingLifetime - 2.0;
            newWoodParticle.position = thisParticle.position + float3(
                (rand(thisParticle.position.x) - 0.5) / 20.0,
                (rand(thisParticle.position.y) - 0.5) / 20.0 + (1.0/50.0),
                (rand(thisParticle.position.z) - 0.5) / 20.0 
            );
            nextParticles.Append(newWoodParticle);
            thisParticle.remainingLifetime = 1.0;
        }
    }// else {
    //    thisParticle.remainingLifetime -= timeStep / 30.0;
    //}

    if (thisParticle.remainingLifetime > 0.0) {
        nextParticles.Append(thisParticle);
    }
}

[numthreads(64,1,1)]
void CopyAppendToRW(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;
        
    GPUParticle thisParticle = lastParticles[id];
    particles[id] = thisParticle;
}

[numthreads(64,1,1)]
void SumBins(uint id : SV_DispatchThreadID) {
    if (id >= particleCount)
        return;
        
    float cellSize = smoothingLength;
        
    float3 positiveShiftedPosition = particles[id].position + float3(boundsSize, boundsSize, boundsSize);
    uint3 binCoords = uint3(floor(positiveShiftedPosition.x / cellSize), floor(positiveShiftedPosition.y / cellSize), floor(positiveShiftedPosition.z / cellSize));
    uint binIndex = EncodeMorton3(binCoords.x, binCoords.y, binCoords.z);

    binParticleIndices[binIndex * 1024 + binCounts[binIndex]] = id;
    InterlockedAdd(binCounts[binIndex], 1);
}

[numthreads(64,1,1)]
void ClearBinCounts(uint id : SV_DispatchThreadID) {
    float cellSize = smoothingLength;
    int binsPerAxis = ceil((boundsSize * 2.0) / cellSize);

    if (id >= binsPerAxis * binsPerAxis * binsPerAxis)
        return;
    
    binCounts[id] = 0;
    
    //binCounts[binIndex]++;
}

[numthreads(4,4,4)]
void SumPrefixes(uint3 id : SV_DispatchThreadID) {
    //uint maxCellIndex = ;
    
    
}



